import { Router } from "express"
import bcrypt from "bcrypt";
import { db } from "../utils/db.js";
import jwt from "jsonwebtoken"

const authRouter = Router();


// üê® Todo: Exercise #1
// ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ Register ‡∏ï‡∏±‡∏ß User ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Database ‡∏ï‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß‡πâ
authRouter.post("/register", async (req, res) => {
    //1.‡∏£‡∏±‡∏ö body ‡∏à‡∏≤‡∏Å user
	const user = {
		username: req.body.username,
		password: req.body.password,
		firstName: req.body.firstName,
		lastName: req.body.lastName
	}

    //2.bcrypt package // npm i bcrypt // npm install bcrypt
    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(user.password, salt) // ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ Encrypt user.password ‡∏î‡πâ‡∏ß‡∏¢ Function bcrypt.hash

	const collection = db.collection("users");
	await collection.insertOne(user)

	return res.json({
		message: "User has been created successfully"
	})
})

// üê® Todo: Exercise #3
// ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ Login ‡∏ï‡∏±‡∏ß User ‡∏ï‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏ß‡πâ
authRouter.post("/login", async (req, res) => {
	const user = await db.collection("users").findOne({
		  username: req.body.username
	  })
  
	if (!user) {
	  return res.status(404).json({
			  "message": "user not found"
		  })
	}
  
	  const isValidPassword = await bcrypt.compare(req.body.password, user.password);
  
	if (!isValidPassword) {
		  return res.status(401).json({
			  "message": "password not valid"
		  })
	}
	  
	// ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Token
	  const token = jwt.sign(
	  //‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ô‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Token
	  {
			  id: user.id,
			  firstName: user.firstName,
			  lastName: user.lastName
		  },
	  process.env.SECRET_KEY, // ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Object process.env ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Access ‡∏ï‡∏±‡∏ß Environment Variable
	  {
		expiresIn: '900000', //‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ Token ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 900000 ms ‡∏ã‡∏∂‡πà‡∏á‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 15 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏´‡∏£‡∏∑‡∏≠ 900 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ô‡∏±‡πà‡∏ô‡πÄ‡∏≠‡∏á)
	  }
	);
  
	return res.json({ 
		  message: "login succesfully",
		  token 
	  })
  });

export default authRouter;
